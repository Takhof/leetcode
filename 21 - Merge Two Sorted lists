var mergeTwoLists = function (l1, l2) {
  //create dummy head
  let dummy = { val: 0, next: null },
    //point current to dummy head
    current = dummy;

  while (l1 && l2) {
    //if l1 or l2 exists, check which one's value is lesser and point current's next to it
    if (l1.val > l2.val) {
      current.next = l2;
      l2 = l2.next;
    } else {
      current.next = l1;
      l1 = l1.next;
    }
    //once it's pointed, move current to current's next
    current = current.next;
  }
  //if either doesnt exist anymore then point current's next to the current location of l1 or l2
  current.next = l1 || l2;

  //return dummy's next
  return dummy.next;
};

var mergeTwoLists = function (l1, l2) {
  if (!l1 || !l2) return l1 ? l1 : l2;
  //function returns current L1 or L2 if one doesnt exist (next is pointed to this return value in the recursion)
  if (l1.val < l2.val) {
    l1.next = mergeTwoLists(l1.next, l2);
    //if l1 val is less than l2 return value becomes l1 val + recursion of l1.next and l2
    return l1;
  } else {
    //if l2 val is less than l1 return value becomes current l2 val + recursion of l1 and l2.next
    l2.next = mergeTwoLists(l1, l2.next);
    return l2;
  }
};
