/**
 * @param {number[]} nums
 * @return {number[][]}
 */
const threesum = (nums) => {
  //declare answer array
  let answer = [];
  //sort the numbers
  nums.sort(function (a, b) {
    return a - b;
  });
  //create a function that goes thru the 2 numbers to test against the first
  const otherTwo = (nums, i) => {
    //set low pointer to loop + 1, high point to end of array
    let low = i + 1;
    let high = nums.length - 1;

    while (low < high) {
      let sum = nums[i] + nums[low] + nums[high];
      if (sum < 0) {
        low++;
      } else if (sum > 0) {
        high--;
      } else {
        answer.push([nums[i], nums[low], nums[high]]);
        //once the answer is found, move the other two one spaces up and down
        low++;
        high--;
        //move the low one further ahead if it's the same so it prevents adding the same
        while (low < high && nums[low] === nums[low - 1]) low++;
      }
    }
  };

  //create function that moves the first point of 3 numbers one at a time
  for (let i = 0; i < nums.length; i++) {
    //if the first number is over 0 it will never equal 0 cuz it's sorted! wow
    if (nums[i] > 0) {
      return answer;
    }
    //check if first number is a duplicate to prevent adding same pairs
    if (i === 0 || nums[i - 1] !== nums[i]) {
      otherTwo(nums, i);
    }
  }
  return answer;
};
